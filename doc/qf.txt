==============================================================================
------------------------------------------------------------------------------
Documentation
Quickfix and Location list management for Neovim.

This plugin allows easier use of the builtin lists for wrapping navigation,

------------------------------------------------------------------------------
                                                                       *qf.nvim*

------------------------------------------------------------------------------
                                                                 *list_defaults*
                                `list_defaults`
Class~
{List}
Fields~
{auto_close} `(boolean)` Close the list if empty
{auto_follow} `(string|boolean)` Follow current entries. Possible strategies: prev,next,nearest or false to disable
{auto_follow_limit} `(number)` limit the distance for the auto follow
{follow_slow} `(boolean)` debounce following to `updatetime`
{auto_open} `(boolean)` Open list on QuickFixCmdPost, e.g; grep
{auto_resize} `(boolean)` Grow or shrink list according to items
{max_height} `(number)` Auto resize max height
{min_height} `(number)` Auto resize min height
{wide} `(boolean)` Open list at the very bottom of the screen
{number} `(boolean)` Show line numbers in window
{relativenumber} `(boolean)` Show relative line number in window
{unfocus_close} `(boolean)` Close list when parent window loses focus
{focus_open} `(boolean)` Pair with `unfocus_close`, open list when parent window focuses

------------------------------------------------------------------------------
                                                                     *qf.config*
                                   `defaults`
Class~
{Config}
Fields~
{c} List
{l} List
{close_other} `(boolean)` Close other list kind on open. If location list opens, qf closes, and vice-versa..
{pretty} `(boolean)` Use a pretty printed format function for the quickfix lists.
{signs} `(table)` Customize signs using { hl, sign }

------------------------------------------------------------------------------
                                                                    *qf.setup()*
                              `qf.setup`({config})
Initialize and configure qf.nvim using the provided config.
Parameters~
{config} Config

------------------------------------------------------------------------------
                                                                   *qf.reopen()*
                              `qf.reopen`({list})
Close and opens list if already open.
This is to fix the list stretching bottom of a new vertical split.
Parameters~
{list} `(string)`

------------------------------------------------------------------------------
                                                                   *qf.resize()*
                          `qf.resize`({list}, {size})
Resize list to the number of items between max and min height
If stay, the list will not be focused.
Parameters~
{list} `(string)`
{size} `(number|nil)` If nil, the size will be deduced from the item count and config

------------------------------------------------------------------------------
                                                         *qf.open()* *Qopen* *Lopen*
                  `qf.open`({list}, {stay}, {silent}, {weak})
Open the `quickfix` or `location` list
If stay == true, the list will not be focused
If auto_close is true, the list will be closed if empty, similar to cwindow
Parameters~
{list} `(string)`
{stay} `(boolean)`
{weak} `(boolean|nil)` Only open if other list kind is not open

------------------------------------------------------------------------------
                                               *qf.close()* *Qclose* *LClose* *VClose*
                               `qf.close`({list})
Close `list`
@param list List

------------------------------------------------------------------------------
                                                   *qf.toggle()* *QToggle* *LToggle*
                          `qf.toggle`({list}, {stay})
Toggle `list`
If stay == true, the list will not be focused
Parameters~
{list} List
{stay} `(boolean)` Do not focus the opened list

------------------------------------------------------------------------------
                                                      *qf.clear()* *Qclear* *Lclear*
                           `qf.clear`({list}, {name})
Clears the quickfix or current location list
Parameters~
{list} List
{name} `(string|nil)` save the list before clearing under name

------------------------------------------------------------------------------
                                                                   *qf.follow()*
                    `qf.follow`({list}, {strategy}, {limit})
strategy is one of the following:
- 'prev'
- 'next'
- 'nearest'
Parameters~
{limit} `(number|nil)` Don't select entry further away than limit.

------------------------------------------------------------------------------
                                                         *qf.next()* *Qnext* *Lnext*
                      `qf.next`({list}, {wrap}, {verbose})
Wrapping version of [lc]next. Also takes into account valid entries.
If wrap is nil or true, it will wrap around the list

------------------------------------------------------------------------------
                                                         *qf.prev()* *Qprev* *Lprev*
                      `qf.prev`({list}, {wrap}, {verbose})

------------------------------------------------------------------------------
                                               *qf.above()* *Qabove* *Labove* *Vabove*
                     `qf.above`({list}, {wrap}, {verbose})
Wrapping version of [lc]above
Will switch buffer

------------------------------------------------------------------------------
                                               *qf.below()* *Qbelow* *Lbelow* *Vbelow*
                     `qf.below`({list}, {wrap}, {verbose})
Wrapping version of [lc]below
Will switch buffer

------------------------------------------------------------------------------
                                                                     *qf.save()*
                           `qf.save`({list}, {name})
Save quickfix or location list with name

------------------------------------------------------------------------------
                                                                     *qf.load()*
                           `qf.load`({list}, {name})
Loads a saved list into the location or quickfix list
If name is not given, user will be prompted with all saved lists.

------------------------------------------------------------------------------
Class~
{set_opts}
Fields~
{items} `(table)`
{lines} `(table)`
{cwd} `(string)`
{compiler} `(string|nil)`
{winid} `(number|nil)`
{title} `(string|nil)`
{tally} `(boolean|nil)`
{open} `(boolean)`

------------------------------------------------------------------------------
                                                                      *qf.set()*
                            `qf.set`({list}, {opts})
Set location or quickfix list items
If a compiler is given, the items will be parsed from it
Invalidates follow cache
Parameters~
{list} `(string)`
{opts} set_opts

------------------------------------------------------------------------------
                                                                    *qf.tally()*
                          `qf.tally`({list}, {title})
Suffix the chosen list with a summary of the classified number of entries

------------------------------------------------------------------------------
         *qf.keep()* *VkeepText* *QkeepText* *LkeepText* *VkeepType* *QkeepType* *LkeepType*
                          `qf.keep`({list}, {filter})
and keep items in a list based on `filter`
Parameters~
{list} `(string)`
{filter} `(function)`

------------------------------------------------------------------------------
                                                   *qf.sort()* *Qsort* *Lsort* *Vsort*
                               `qf.sort`({list})
Sort the items according to file -> line -> column

------------------------------------------------------------------------------
                                                           *qf.setup_autocmds()*
                         `qf.setup_autocmds`({config})
Called in |qf.setup|
Parameters~
{config} Config


 vim:tw=78:ts=8:noet:ft=help:norl: